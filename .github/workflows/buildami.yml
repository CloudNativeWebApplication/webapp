name: Build AMI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Test MySQL Connection
        run: |
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -D ${{ secrets.MYSQL_DATABASE }} -e "SHOW DATABASES;"

      - name: Run Integration Tests in the Background
        run: npx mocha tests/healthz.test.js &

      - name: Create Zip File
        run: |
          rm -r node_modules
          zip -r mycode.zip .

      - name: Upload Zip File
        uses: actions/upload-artifact@v2
        with:
          name: codezip
          path: mycode.zip

      - name: Install Packer plugin
        run: packer plugins install github.com/hashicorp/amazon

      - name: Building Packer Template
        run: |
          packer build -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
                       -var "source_ami=${{ secrets.SOURCE_AMI }}" \
                       -var "aws_region=${{ secrets.AWS_REGION }}" \
                       -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                       -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
                       debian12-ami.pkr.hcl | sudo tee output.txt
          tail -2 output.txt | head -2 | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH) }' >> ami.txt
          echo "Captured AMI ID: $(tail -1 ami.txt)"

      - name: Create new launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          launch_template_id=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          ami_id=$(tail -1 ami.txt)
          aws ec2 create-launch-template-version \
            --launch-template-id $launch_template_id \
            --source-version 1 \
            --version-description "Updated with latest AMI" \
            --launch-template-data "ImageId=$ami_id"

      - name: Update the autoscaling group
        id: set_asg_name
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          AUTO_SCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?starts_with(AutoScalingGroupName, 'autoScalingGroup-')].AutoScalingGroupName" --output text | head -n 1)
          if [ -z "$AUTO_SCALING_GROUP_NAME" ]; then
            echo "No Auto Scaling Group found with the specified prefix."
            exit 1
          fi

          echo "Auto Scaling Group Name: $AUTO_SCALING_GROUP_NAME"
          echo "AUTO_SCALING_GROUP_NAME=$AUTO_SCALING_GROUP_NAME" >> $GITHUB_ENV

          LAUNCH_TEMPLATE_NAME=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME --query "AutoScalingGroups[0].LaunchTemplate.LaunchTemplateName" --output text)
          LAUNCH_TEMPLATE_VERSION='Latest'

          if [ -z "$LAUNCH_TEMPLATE_NAME" ]; then
            echo "No Launch Template found for the Auto Scaling Group."
            exit 1
          fi

          echo "Launch Template Name: $LAUNCH_TEMPLATE_NAME"

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME --launch-template LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=$LAUNCH_TEMPLATE_VERSION

      - name: Instance refresh and wait
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --query 'InstanceRefreshId' --output text)
          STATUS="pending"
          while [ "$STATUS" != "Successful" ]; do
            echo "Waiting for instance refresh to complete..."
            sleep 60
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --instance-refresh-ids $REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            fi
          done
          echo "Instance refresh completed successfully."