name: Build AMI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Test MySQL Connection
        run: |
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -D ${{ secrets.MYSQL_DATABASE }} -e "SHOW DATABASES;"

      - name: Run Integration Tests in the Background
        run: npx mocha tests/healthz.test.js &


      - name: Create Zip File
        run: |
          rm -r node_modules
          zip -r mycode.zip .

      - name: Upload Zip File
        uses: actions/upload-artifact@v2
        with:
          name: codezip
          path: mycode.zip

      - name: Install Packer plugin
        run: packer plugins install github.com/hashicorp/amazon

      - name: Run Packer
        run: |
          # Install Packer
          curl -fsSL https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip -o packer.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          packer init debian12-ami.pkr.hcl

          # Run Packer build (modify this command as needed)
          packer build -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
                     -var "source_ami=${{ secrets.SOURCE_AMI }}" \
                     -var "aws_region=${{ secrets.AWS_REGION }}" \
                     -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY}}" \
                     -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY}}" \
                      debian12-ami.pkr.hcl | grep 'AMI: ami-' | awk '{print $2}')
          echo "::set-output name=ami-id::$AMI_ID"

      - name: Create Launch Template using AWS SDK
        run: |
          npm install aws-sdk
          const AWS = require('aws-sdk');
          AWS.config.update({ region: process.env.AWS_REGION });

          const ec2 = new AWS.EC2();
          const userDataScript = `#!/bin/bash
          # Placeholder for environment variables
          # These will be replaced later by Pulumi`;

          const launchTemplateData = {
              ImageId: process.env.AMI_ID, 
              InstanceType: 't2.micro',
              UserData: Buffer.from(userDataScript).toString('base64'),
              // ... other configurations ...
          };

          ec2.createLaunchTemplate({
              LaunchTemplateName: 'MyLaunchTemplate',
              LaunchTemplateData: launchTemplateData
          }, (err, data) => {
              if (err) console.error(err, err.stack);
              else console.log(data);
          });
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AMI_ID: ${{ steps.packer-build.outputs.ami-id }}

