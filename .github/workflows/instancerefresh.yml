name: Update Launch Template and ASG

on:
  workflow_run:
    workflows: ["Build AMI"]
    types:
      - completed

jobs:
  update-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download AMI ID artifact
        uses: actions/download-artifact@v2
        with:
          name: ami-id

      - name: Unzip Artifact
        run: unzip ami-id.zip

      - name: Read AMI ID from the file
        run: |
          AMI_ID=$(cat ami_id.txt)
          echo "AMI ID: $AMI_ID"

      - name: Create new launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[?starts_with(LaunchTemplateName, `launchTemplate`) == `true`].LaunchTemplateName' --output text)
          aws ec2 create-launch-template-version --launch-template-name $LAUNCH_TEMPLATE_NAME --version-description latest --source-version 1 --launch-template-data "ImageId=$AMI_ID"

      - name: Update the autoscaling group
        id: set_asg_name
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          AUTO_SCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?starts_with(AutoScalingGroupName, 'autoScalingGroup-')].AutoScalingGroupName" --output text | head -n 1)
          if [ -z "$AUTO_SCALING_GROUP_NAME" ]; then
              echo "No Auto Scaling Group found with the specified prefix."
              exit 1
          fi
          echo "Auto Scaling Group Name: $AUTO_SCALING_GROUP_NAME"
          echo "AUTO_SCALING_GROUP_NAME=$AUTO_SCALING_GROUP_NAME" >> $GITHUB_ENV
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME --launch-template LaunchTemplateName=launchTemplate-941aa22,Version='$Latest'

      - name: Instance refresh and wait
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --query 'InstanceRefreshId' --output text)
          STATUS="pending"
          while [ "$STATUS" != "Successful" ]; do
            echo "Waiting for instance refresh to complete..."
            sleep 60 
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --instance-refresh-ids $REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            fi
          done
          echo "Instance refresh completed successfully."
